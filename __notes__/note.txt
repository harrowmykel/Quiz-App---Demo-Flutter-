Flutter{
    --> everything is a widget
}

Map/Objects{
    --> collection of key:value pairs
    --> created with 
    `
        {
            a : value
        }
            OR

        Map()
    `
}

final/const{
    --> final for class properties
    --> const for method properties
}

Widget{
    --> created by flutter using the build(context) method in StatelessWidget
            or StatefulWidget
    --> displayed on screen

    --> Types {
        --> visible Widgets (input, output content)
            --> buttons, text

        --> invisible Widgets
            --> columns, rows
    }
}

ForEach.Widget{
    --> Concatenate 2 lists
        `children: [
        Question(
            question: questions[_questionIndex],
        ),
        ...(questions[_questionIndex] as List<String>).map((answer) {
            return Answer(
            question: questions[_questionIndex],
            position: 0,
            answerFunction: _answerQuestion,
            );
        }).toList(),
        ], `
}

Abstraction/Access Modifier{
    --> when a class/Property starts with underscore, it can only be used in the 
    file it is defined in.
    {
        MyAppState, questionIndex => public
        _MyAppState, _questionIndex => private
    }

}

State{
    --> Data/info used by app
        --> e.g Variable etc
    --> widgets that just output data are usually stateless
     --> e.g Text Widget
    {
        --> App Wide State
        --> Widget State
    }
    --> force page reload by fixing it in setState (anonymous) function
        setState(() {
        questionIndex++;
        });
}

Statefulwidget{
    ` class MyApp extends StatefulWidget {
        @override
        State<StatefulWidget> createState() {
        return MyAppState();
        }
      }
      class MyAppState extends State<MyApp>{
      }
    `
}

Scaffold{
    ==> base page design
}

Column{
    Column(children: <Widget>[])
}

Container{
    --> HTML/CSS box model,
    --> container for widgets
}

declarator{
    --> @override
}

pubspec.yaml{
    --> dependencies saving
}

main.dart{
    --> entry point for app
    -> import 'package:PACKAGE_NAME';
    -> import './question.dart';
}

functions{
    `void main(){
        runApp(MyApp());
    }
        OR
    //if only one expression, auto returned
    void main() => runApp(MyApp());
    `
}

class{
    --> constructor parameters can be passed via variable name
    `MyApp(name: 'west', age: 21)`
    -> constructor can be executed like a function or with keyword 'new'
         e.g MyApp(); or new MyApp();
    `class ClassName{
        String name;
        int age;

        //constructors

        ClassName(int a, int b){
            //ClassName(23, 40);
        }
                OR
        ClassName({int a = 30, @required int b}){
            //ClassName(a: 23, b: 40);
            // @required is only available in Flutter not in dart
        }
                OR 
        ClassName({this.name, this.age});
                OR 
        ClassName.subConstructor(this.name){
            //set defaults
            age = 60;
        }
    }`
}